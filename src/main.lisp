(in-package :game)

;;;; debug
(declaim (optimize (debug 3) (safety 3)
                   (speed 0) (space 0) (compilation-speed 0)))

;; gameover
(defparameter *gameover* nil)

;; player
(defvar *player* nil)

;; enemy
(defvar *piyo* (make-array 0 :adjustable t :fill-pointer 0))

;; background
(defparameter *background* nil)

(defun generate-instance ()
  (setf *player* (make-instance 'player))
  (vector-push-extend (make-instance 'piyo) *piyo*)
  (setf *background* (make-instance 'background))
  (setf *gameover* (make-instance 'gameover)))

(defun initialize ()
  (sdl:window (window-width *system-data*)
	      (window-height *system-data*)
	      :title-caption "2DACT"
	      :fullscreen (full-screen-flag system-flag)
	      :double-buffer t
	      :hw t
	      :position #(50 50))
  (setf (sdl:frame-rate) 60)
  (sdl:set-video-driver "directx")
  (sdl:init-video)
  (generate-instance))

(defun key-event2 (player current-key-state)
  (with-slots (right left up) current-key-state
    (with-slots (ground-flag direction action-name) player
      (when (and (eq up nil)
		 (eq left nil)
		 (eq right nil)
		 (eq ground-flag t)
		 (string= direction "left"))
	(setf action-name "standing-left"))
      (when (and (eq up nil)
		 (eq left nil)
		 (eq right nil)
		 (eq ground-flag t)
		 (string= direction "right"))
	(setf action-name "standing-right"))
      (if (eq up t) (jump player))
      (if (eq left t) (move player "left"))
      (if (eq right t) (move player "right")))))

(defun draw-stage-debug-mode2 (instance-array)
  (setf *block-array* (load-csv "map2.csv"))
  (loop for y from 0 to (- *block-column* 1) by 1 collect
       (loop for x from *scroll-array-counter* to (+ *the-number-of-row-block-in-window* *scroll-array-counter*)
	  by 1 collect
	    (progn
	      ;;debug mode
	      (setf (id (aref instance-array y x))
		    (aref *block-array* y x))
	      (setf (draw-flag (aref instance-array y x))
		    (aref *block-array* y x))
	      (if (>= (draw-flag (aref instance-array y x)) 0)
		  (draw-sprite (aref instance-array y x)))))))

(defun draw-object ()
  ;; damage piyo
  (when (eq (damage-detect *piyo*) t)
    (if (>= (image-object-hp *player*) 1)
	(hp *player* -1))
;      (-= (image-object-hp *player*) 1))
    (cond ((string= (image-object-direction *player*) "left")
	   (setf (image-object-action-name *player*) "fox-girl-damage-motion1-left"))
	  ((string= (image-object-direction *player*) "right")
	   (setf (image-object-action-name *player*) "fox-girl-damage-motion1-right"))))
  ;; damage piyo2
  (when (eq (damage-detect *piyo2*) t)
    (if (>= (image-object-hp *player*) 1) 
      (-= (image-object-hp *player*) 1))
    (cond ((string= (image-object-direction *player*) "left")
	   (setf (image-object-action-name *player*) "fox-girl-damage-motion1-left"))
	  ((string= (image-object-direction *player*) "right")
	   (setf (image-object-action-name *player*) "fox-girl-damage-motion1-right"))))
  (when (<= (image-object-hp *player*) 0)
    (cond ((string= (image-object-direction *player*) "left")
	   (setf (image-object-action-name *player*) "fox-girl-down-motion-left"))
	  ((string= (image-object-direction *player*) "right")
	   (setf (image-object-action-name *player*) "fox-girl-down-motion-right"))))
;  (mapcar #'draw-sprite `(,*background* ,*piyo* ,*player*))
  (draw-stage-debug-mode2 *block-instance-array*)
  (when (eq (debug-flag system-flag) t)
    (draw-boxes)))

(defun draw-boxes ()
  (mapcar #'draw-collision-box `(,*player* ,(aref *piyo* 0)))
  (mapcar #'draw-damage-box `(,*player* ,(aref *piyo* 0))))
  
(defun block-collision ()
  (let ((bottom-collision-flag-counter-player 0)
	(bottom-collision-flag-counter-piyo 0)
	(bottom-collision-flag-counter-piyo2 0))
    (loop for y from 0 to (- *block-column* 1) by 1 collect
	 (loop for x from 0 to (- *block-row* 1) by 1 collect
	      (when (>= (image-object-draw-flag (aref *block-instance-array* y x))
		       0)
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;; player
		(if (eq (bottom-collide *player* (aref *block-instance-array* y x))
			t)
		    (incf bottom-collision-flag-counter-player))		
		(if (> bottom-collision-flag-counter-player 0)
		    (progn
		      (setf *g-flag* nil)
		      (setf (image-object-ground-flag *player*) t)
		      (setf (image-object-air-flag *player*) nil))
		    (progn 
		      (setf *g-flag* t)
		      (setf (image-object-ground-flag *player*) nil)
		      (setf (image-object-air-flag *player*) t)))
		(collide *player* (aref *block-instance-array* y x))
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;; piyo
		(if (eq (bottom-collide *piyo* (aref *block-instance-array* y x))
			t)
		    (incf bottom-collision-flag-counter-piyo))		
		(if (> bottom-collision-flag-counter-piyo 0)
		    (progn
		      (setf *piyo-g-flag* nil)
		      (setf (image-object-ground-flag *piyo*) t)
		      (setf (image-object-air-flag *piyo*) nil))
		    (progn 
		      (setf *piyo-g-flag* t)
		      (setf (image-object-ground-flag *piyo*) nil)
		      (setf (image-object-air-flag *piyo*) t)))
		(collide *piyo* (aref *block-instance-array* y x))
		;; piyo2
		(if (eq (bottom-collide *piyo2* (aref *block-instance-array* y x))
			t)
		    (incf bottom-collision-flag-counter-piyo2))		
		(if (> bottom-collision-flag-counter-piyo2 0)
		    (progn
		      (setf *piyo2-g-flag* nil)
		      (setf (image-object-ground-flag *piyo2*) t)
		      (setf (image-object-air-flag *piyo2*) nil))
		    (progn 
		      (setf *piyo2-g-flag* t)
		      (setf (image-object-ground-flag *piyo2*) nil)
		      (setf (image-object-air-flag *piyo2*) t)))
		(collide *piyo2* (aref *block-instance-array* y x)))))))

(defun piyo-ai ()		       
  (when (eq (image-object-left-collision-flag *piyo*) t)
    (setf (image-object-direction *piyo*) "right")
    (setf (image-object-action-name *piyo*) "piyo-walking-right")
    (setf (image-object-left-collision-flag *piyo*) nil))
  (when (eq (image-object-left-collision-flag *piyo2*) t)
    (setf (image-object-direction *piyo2*) "right")
    (setf (image-object-action-name *piyo2*) "piyo-walking-right")
    (setf (image-object-left-collision-flag *piyo2*) nil))
  (when (eq (image-object-right-collision-flag *piyo*) t)
    (setf (image-object-direction *piyo*) "left")
    (setf (image-object-action-name *piyo*) "piyo-walking-left")
    (setf (image-object-right-collision-flag *piyo*) nil))
  (when (eq (image-object-right-collision-flag *piyo2*) t)
    (setf (image-object-direction *piyo2*) "left")
    (setf (image-object-action-name *piyo2*) "piyo-walking-left")
    (setf (image-object-right-collision-flag *piyo2*) nil))
  
  (cond ((string= (image-object-direction *piyo*) "left")
	 (move *piyo* "left"))
	((string= (image-object-direction *piyo*) "right")
	 (move *piyo* "right")))
  (cond ((string= (image-object-direction *piyo2*) "left")
	 (move *piyo2* "left"))
	((string= (image-object-direction *piyo2*) "right")
	 (move *piyo2* "right"))))

(defun check-jump-flag ()
  (if (eq (image-object-jump-flag *player*) t)		  
      (progn
	(setf *g-flag* nil)
	(jump *player*))))

(defun free-fall ()
  (funcall *player-free-fall* *player* *g-flag*)
  (funcall *piyo-free-fall* *piyo* *piyo-g-flag*)
  (funcall *piyo2-free-fall* *piyo2* *piyo2-g-flag*))

(defun update-character ()
  (mapcar #'update `(,*player* ,(aref *piyo* 0))))

(defun damage-detect (enemy)
  (if (and (<= (x (collision *player*))
	       (+ (x (attack-collision enemy))
		  (w (collision enemy))))
	   (<= (x (attack-collision enemy))
	       (+ (x (collision *player*))
		  (w (damage-collision *player*))))
	   (<= (y (damage-collision-y *player*))
	       (+ (y (attack-collision enemy))
		  (h (attack-collision enemy))))
	   (<= (y (attack-collision enemy))
	       (+ (y (damage-collision *player*))
		  (h (damage-collision *player*)))))
    t
    nil))

(defun gameover ()
  (when (or (<= (image-object-hp *player*) 0)
	    (>= (image-object-position-y *player*) 600))
    (setf (gameover-flag system-flag) t)
    (sdl:clear-display sdl:*black*)	
    (check-jump-flag)
    (free-fall)
    (block-collision)
;    (scroll)
    (update-character)
    (piyo-ai)
    (draw-object)
    (cond ((string= (image-object-direction *player*) "left")
	   (setf (image-object-action-name *player*)
		 "fox-girl-down-motion-left"))
	  ((string= (image-object-direction *player*) "right")
	   (setf (image-object-action-name *player*)
		 "fox-girl-down-motion-right")))
    (sdl:draw-surface-at-* *gameover* 0 0)
    (sdl:update-display)))

(defun mainloop ()
  (when (and (> (image-object-hp *player*) 0)
	     (< (image-object-position-y *player*) 600))
    (setf (gameover-flag system-flag) nil)
    (sdl:clear-display sdl:*black*)
    (check-jump-flag)
    (free-fall)
    (block-collision)
;    (scroll)
    (update-character)
    (piyo-ai)
    (draw-object)
    (sdl:update-display)))

(defun reset ()
  (reinitialize-instance *player*))

(defun main ()
  (sdl:with-init ()
    (initialize)
    (let ((current-key-state (make-instance 'key-state)))
      (sdl:with-events (:poll)
	(:quit-event () t)
	(:key-down-event (:key key)
			 (when (sdl:key= key :sdl-key-escape)
			   (sdl:push-quit-event))
			 (when (sdl:key= key :sdl-key-1)
			   (if (eq (full-screen-flag system-flag) nil)
			       (setf (full-screen-flag system-flag) t)
			       (setf (full-screen-flag system-flag) nil))
			   (sdl:window 800 600 :fullscreen (full-screen-flag system-flag)))
			 (when (sdl:key= key :sdl-key-d)
			   (if (eq (debug-flag system-flag) nil)
			       (setf (debug-flag system-flag) t)
			       (setf (debug-flag system-flag) nil)))
			 (when (sdl:key= key :sdl-key-r)
			   (if (eq (gameover-flag system-flag) t)
			       (reset)))
			 (update-key-state key t current-key-state))
	(:key-up-event (:key key)
		       (update-key-state key nil current-key-state))
	(:idle ()
	       (key-event2 *player* current-key-state)
	       (gameover)
	       (mainloop))))))
