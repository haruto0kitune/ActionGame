;;;; uses instance of player-flag class
;;;; player-flag is global

(in-package :game)

(defclass player-draw ()
  ((sprite-sheets    
    :initform (make-instance 'player-sprite-sheet))
   (draw-closure
    :initform (make-hash-table :test #'equal))))

(defmethod standing-left ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(sdl:draw-surface-at-* (gethash "standing-left" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)
	(when (> frame-counter (gethash "standing-left" (duration sprite-sheets)))
	  (incf current-cell)
	  (setf frame-counter 0)
	  (if (> current-cell (gethash "standing-left" (total-cells (cells sprite-sheets))))
	      (setf current-cell 0)))))))

(defmethod standing-right ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(sdl:draw-surface-at-* (gethash "standing-right" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)
	(when (> frame-counter (gethash "standing-right" (duration sprite-sheets)))
	  (incf current-cell)
	  (setf frame-counter 0)
	  (if (> current-cell (gethash "standing-right" (total-cells (cells sprite-sheets))))
	      (setf current-cell 0)))))))

(defmethod running-left ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(sdl:draw-surface-at-* (gethash "running-left" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)
	(when (> frame-counter (gethash "running-left" (duration sprite-sheets)))
	  (incf current-cell)
	  (setf frame-counter 0)
	  (if (> current-cell (gethash "running-left" (total-cells (cells sprite-sheets))))
	      (setf current-cell 0)))))))

(defmethod running-right ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(sdl:draw-surface-at-* (gethash "running-right" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)
	(when (> frame-counter (gethash "running-right" (duration sprite-sheets)))
	  (incf current-cell)
	  (setf frame-counter 0)
	  (if (> current-cell (gethash "running-right" (total-cells (cells sprite-sheets))))
	      (setf current-cell 0)))))))

(defmethod jumping-left ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(if (eq (ground-flag player-flag) t)
	    (setf current-cell 0))
	(sdl:draw-surface-at-* (gethash "jumping-left" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)	   
	(when (> frame-counter (gethash "jumping-left" (duration sprite-sheets)))
	  (incf current-cell)
	  (setf frame-counter 0)
	  (if (> current-cell (gethash "jumping-left" (total-cells (cells sprite-sheets))))
	      (setf current-cell (gethash "jumping-left" (total-cell (cells sprite-sheets))))))))))

(defmethod jumping-right ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(if (eq (ground-flag player-flag) t)
	    (setf current-cell 0))
	(sdl:draw-surface-at-* (gethash "jumping-right" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)	   
	(when (> frame-counter (gethash "jumping-right" (duration sprite-sheets)))
	  (incf current-cell)
	  (setf frame-counter 0)
	  (if (> current-cell (gethash "jumping-right" (total-cells (cells sprite-sheets))))
	      (setf current-cell (gethash "jumping-right" (total-cell (cells sprite-sheets))))))))))

(defmethod damage-motion-left ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(when (and (eq (life player-flag) nil)
		   (> current-cell (gethash "damage-motion-left" (total-cells (cells sprite-sheets)))))
	  (setf action-name "down-motion-left"))
	(sdl:draw-surface-at-* (gethash "damage-motion-left" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)
	(when (> frame-counter (gethash "damage-motion-left" (duration sprite-sheets)))
	  (incf current-cell)
	  (setf frame-counter 0)
	  (if (> current-cell (gethash "damage-motion-left" (total-cell (cells sprite-sheets))))
	      (setf current-cell 0)))))))

(defmethod damage-motion-right ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(when (and (eq (life player-flag) nil)
		   (> current-cell (gethash "damage-motion-right" (total-cells (cells sprite-sheets)))))
	  (setf action-name "down-motion-right"))
	(sdl:draw-surface-at-* (gethash "damage-motion-right" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)
	(when (> frame-counter (gethash "damage-motion-right" (duration sprite-sheets)))
	  (incf current-cell)
	  (setf frame-counter 0)
	  (if (> current-cell (gethash "damage-motion-right" (total-cell (cells sprite-sheets))))
	      (setf current-cell 0)))))))

(defmethod down-motion-left ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(sdl:draw-surface-at-* (gethash "down-motion-left" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)
	(when (> frame-counter (gethash "down-motion-left" (duration sprite-sheets)))
	  (setf frame-counter 0)
	  (if (not (= current-cell (gethash "down-motion-left" (total-cell (cells sprite-sheets)))))
		   (incf current-cell)))))))

(defmethod down-motion-right ((player-draw player-draw))
  (with-slots (sprite-sheets) player-draw
    (let ((current-cell 0) (frame-counter 0))
      (lambda (x y)
	(sdl:draw-surface-at-* (gethash "down-motion-right" (sprite-sheet sprite-sheets)) x y :cell current-cell)
	(incf frame-counter)
	(when (> frame-counter (gethash "down-motion-right" (duration sprite-sheets)))
	  (setf frame-counter 0)
	  (if (not (= current-cell (gethash "down-motion-right" (total-cell (cells sprite-sheets)))))
		   (incf current-cell)))))))

(defmethod generate-draw-closure ((player-draw player-draw))
  (with-slots (draw-closure) player-draw
    (setf (gethash "standing-left" draw-closure) (standing-left player-draw))
    (setf (gethash "standing-right" draw-closure) (standing-right player-draw))
    (setf (gethash "running-left" draw-closure) (running-left player-draw))
    (setf (gethash "running-right" draw-closure) (running-right player-draw))
    (setf (gethash "jumping-left" draw-closure) (jumping-left player-draw))
    (setf (gethash "jumping-right" draw-closure) (jumping-right player-draw))
    (setf (gethash "damage-motion-left" draw-closure) (damage-motion-left player-draw))
    (setf (gethash "damage-motion-right" draw-closure) (damage-motion-right player-draw))
    (setf (gethash "down-motion-left" draw-closure) (down-motion-left player-draw))
    (setf (gethash "down-motion-right" draw-closure) (down-motion-right player-draw))))
  
(defmethod draw-sprite ((player-draw player-draw) x y)
  (with-slots (action-name) player-draw
    (cond ((string= action-name "standing-left") (funcall (gethash "standing-left" draw-closure) x y))
	  ((string= action-name "standing-right") (funcall (gethash "standing-right" draw-closure) x y))
	  ((string= action-name "running-left") (funcall (gethash "running-left" draw-closure) x y))
	  ((string= action-name "running-right") (funcall (gethash "running-right" draw-closure) x y))
	  ((string= action-name "jumping-left") (funcall (gethash "jumping-left" draw-closure) x y))
	  ((string= action-name "jumping-right") (funcall (gethash "jumping-right" draw-closure) x y))
	  ((string= action-name "damage-motion-left") (funcall (gethash "damage-motion-left" draw-closure) x y))
	  ((string= action-name "damage-motion-right") (funcall (gethash "damage-motion-right" draw-closure) x y))
	  ((string= action-name "down-motion-left") (funcall (gethash "down-motion-left" draw-closure) x y))
	  ((string= action-name "down-motion-right") (funcall (gethash "down-motion-right" draw-closure) x y)))))

