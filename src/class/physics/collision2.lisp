(in-package :game)

(defun detect-collision-of-points (point1 point2)
  (let ((a-x (svref point1 0))
	(a-y (svref point1 1))
	(b-x (svref point2 0))
	(b-y (svref point2 1)))
    (if (and (= a-x b-x)
	     (= a-y b-y))
      t
      nil)))

(defun detect-collision-of-line-segments (line-segment1 line-segment2)
  (let ((collider-x0 (svref (line-segment-starting-point line-segment1) 0))
	(collider-y0 (svref (line-segment-starting-point line-segment1) 1))
	(collider-x1 (svref (line-segment-terminal-point line-segment1) 0))
	(collider-y1 (svref (line-segment-terminal-point line-segment1) 1))
	(collided-x0 (svref (line-segment-starting-point line-segment2) 0))
	(collided-y0 (svref (line-segment-starting-point line-segment2) 1))
	(collided-x1 (svref (line-segment-terminal-point line-segment2) 0))
	(collided-y1 (svref (line-segment-terminal-point line-segment2) 1)))
    (if (and (= collider-y0 collided-y0)
	     (= collider-y1 collided-y1)
	     (or (<= collided-x0 collider-x0 collided-x1)
		 (<= collided-x0 collider-x1 collided-x1)))
      t
      nil)))

(defun search-line-segment-to-the-left (line-segment1 line-segment2 value)
  (let* ((t-starting-point1 (subseq (line-segment-starting-point line-segment1) 0))
	 (t-terminal-point1 (subseq (line-segment-terminal-point line-segment1) 0))
	 (t-starting-point2 (subseq (line-segment-starting-point line-segment2) 0))
	 (t-terminal-point2 (subseq (line-segment-terminal-point line-segment2) 0))
	 (t-line-segment1 (make-line-segment :starting-point t-starting-point1
					     :terminal-point t-terminal-point1))
	 (t-line-segment2 (make-line-segment :starting-point t-starting-point2
					     :terminal-point t-terminal-point2)))
    (cond ((= value 0) (return-from search-line-segment-to-the-left nil))
	  ((= value 99) (return-from search-line-segment-to-the-left t)))
    (-= (svref (line-segment-starting-point t-line-segment1) 0) value)
    (-= (svref (line-segment-terminal-point t-line-segment1) 0) value)
    (if (detect-collision-of-line-segments t-line-segment1 t-line-segment2)
      (setf value 100))
    (search-line-segment-to-the-left line-segment1 line-segment2 (- value 1))))

(defun search-line-segment-to-the-right (line-segment1 line-segment2 value)
  (let* ((t-starting-point1 (subseq (line-segment-starting-point line-segment1) 0))
	 (t-terminal-point1 (subseq (line-segment-terminal-point line-segment1) 0))
	 (t-starting-point2 (subseq (line-segment-starting-point line-segment2) 0))
	 (t-terminal-point2 (subseq (line-segment-terminal-point line-segment2) 0))
	 (t-line-segment1 (make-line-segment :starting-point t-starting-point1
					     :terminal-point t-terminal-point1))
	 (t-line-segment2 (make-line-segment :starting-point t-starting-point2
					     :terminal-point t-terminal-point2)))
    (cond ((= value 0) (return-from search-line-segment-to-the-right nil))
	  ((= value 99) (return-from search-line-segment-to-the-right t)))
    (+= (svref (line-segment-starting-point t-line-segment1) 0) value)
    (+= (svref (line-segment-terminal-point t-line-segment1) 0) value)
    (if (detect-collision-of-line-segments t-line-segment1 t-line-segment2)
      (setf value 100))
    (search-line-segment-to-the-right t-line-segment1 t-line-segment2 (- value 1))))

(defun search-line-segment-to-the-up (line-segment1 line-segment2 value)
  (let* ((t-starting-point1 (subseq (line-segment-starting-point line-segment1) 0))
	 (t-terminal-point1 (subseq (line-segment-terminal-point line-segment1) 0))
	 (t-starting-point2 (subseq (line-segment-starting-point line-segment2) 0))
	 (t-terminal-point2 (subseq (line-segment-terminal-point line-segment2) 0))
	 (t-line-segment1 (make-line-segment :starting-point t-starting-point1
					     :terminal-point t-terminal-point1))
	 (t-line-segment2 (make-line-segment :starting-point t-starting-point2
					     :terminal-point t-terminal-point2)))
    (cond ((= value 0) (return-from search-line-segment-to-the-up nil))
	  ((= value 99) (return-from search-line-segment-to-the-up t)))
    (-= (svref (line-segment-starting-point t-line-segment1) 1) value)
    (-= (svref (line-segment-terminal-point t-line-segment1) 1) value)
    (if (detect-collision-of-line-segments t-line-segment1 t-line-segment2)
      (setf value 100))
    (search-line-segment-to-the-up t-line-segment1 t-line-segment2 (- value 1))))

(defun search-line-segment-to-the-down (line-segment1 line-segment2 value)
  (let* ((t-starting-point1 (subseq (line-segment-starting-point line-segment1) 0))
	 (t-terminal-point1 (subseq (line-segment-terminal-point line-segment1) 0))
	 (t-starting-point2 (subseq (line-segment-starting-point line-segment2) 0))
	 (t-terminal-point2 (subseq (line-segment-terminal-point line-segment2) 0))
	 (t-line-segment1 (make-line-segment :starting-point t-starting-point1
					     :terminal-point t-terminal-point1))
	 (t-line-segment2 (make-line-segment :starting-point t-starting-point2
					     :terminal-point t-terminal-point2)))
    (cond ((= value 0) (return-from search-line-segment-to-the-down nil))
	  ((= value 99) (return-from search-line-segment-to-the-down t)))
    (-= (svref (line-segment-starting-point t-line-segment1) 1) value)
    (-= (svref (line-segment-terminal-point t-line-segment1) 1) value)
    (if (detect-collision-of-line-segments t-line-segment1 t-line-segment2)
      (setf value 100))
    (search-line-segment-to-the-down t-line-segment1 t-line-segment2 (- value 1))))

(defun get-line-segment-distance-x-left (line-segment1 line-segment2 value)
  (let* ((t-starting-point1 (subseq (line-segment-starting-point line-segment1) 0))
	 (t-terminal-point1 (subseq (line-segment-terminal-point line-segment1) 0))
	 (t-starting-point2 (subseq (line-segment-starting-point line-segment2) 0))
	 (t-terminal-point2 (subseq (line-segment-terminal-point line-segment2) 0))
	 (t-line-segment1 (make-line-segment :starting-point t-starting-point1
					     :terminal-point t-terminal-point1))
	 (t-line-segment2 (make-line-segment :starting-point t-starting-point2
					     :terminal-point t-terminal-point2)))
    (if (= value 0) (return-from get-line-segment-distance-x-left nil))
    (-= (svref (line-segment-starting-point t-line-segment1) 0) value)
    (-= (svref (line-segment-terminal-point t-line-segment1) 0) value)
    (if (detect-collision-of-line-segments t-line-segment1 t-line-segment2)
      (return-from get-line-segment-distance-x-left value))
    (get-line-segment-distance-x-left line-segment1 line-segment2 (- value 1))))

(defun search-point-to-the-left (point1 point2 value)
  (let ((l-point1 (subseq point1 0))
	(l-point2 (subseq point2 0)))
    (cond ((= value 0) (return-from search-point-to-the-left nil))
	  ((= value 99) (return-from search-point-to-the-left t)))
    (-= (svref l-point1 0) value)
    (if (detect-collision-of-points l-point1 l-point2) (setf value 100))
    (search-point-to-the-left point1 point2 (- value 1))))

(defun search-point-to-the-right (point1 point2 value)
  (let ((l-point1 (subseq point1 0))
	(l-point2 (subseq point2 0)))
    (cond ((= value 0) (return-from search-point-to-the-right nil))
	  ((= value 99) (return-from search-point-to-the-right t)))
    (+= (svref l-point1 0) value)
    (if (detect-collision-of-points l-point1 l-point2) (setf value 100))
    (search-point-to-the-right point1 point2 (- value 1))))

(defun search-point-to-the-up (point1 point2 value)
  (let ((l-point1 (subseq point1 0))
	(l-point2 (subseq point2 0)))
    (cond ((= value 0) (return-from search-point-to-the-up nil))
	  ((= value 99) (return-from search-point-to-the-up t)))
    (-= (svref l-point1 1) value)
    (if (detect-collision-of-points l-point1 l-point2) (setf value 100))
  (search-point-to-the-up point1 point2 (- value 1))))

(defun search-point-to-the-down (point1 point2 value)
  (let ((l-point1 (subseq point1 0))
	(l-point2 (subseq point2 0)))
    (cond ((= value 0) (return-from search-point-to-the-down nil))
	  ((= value 99) (return-from search-point-to-the-down t)))
    (+= (svref l-point1 1) value)
    (if (detect-collision-of-points l-point1 l-point2) (setf value 100))
  (search-point-to-the-down point1 point2 (- value 1))))
  
(defun get-distance-x-left (point1 point2 value)
  (let ((l-point1 (subseq point1 0))
	(l-point2 (subseq point2 0)))
    (if (= value 0) (return-from get-distance-x-left nil))
    (-= (svref l-point1 0) value)
    (if (detect-collision-of-points l-point1 l-point2) (return-from get-distance-x-left value))
    (get-distance-x-left point1 point2 (- value 1))))

(defun get-distance-x-right (point1 point2 value)
  (let ((l-point1 (subseq point1 0))
	(l-point2 (subseq point2 0)))
    (if (= value 0) (return-from get-distance-x-right nil))
    (+= (svref l-point1 0) value)
    (if (detect-collision-of-points l-point1 l-point2) (return-from get-distance-x-right value))
    (get-distance-x-right point1 point2 (- value 1))))

(defun get-distance-y-up (point1 point2 value)
  (let ((l-point1 (subseq point1 0))
	(l-point2 (subseq point2 0)))
    (if (= value 0) (return-from get-distance-y-up nil))
    (-= (svref l-point1 1) value)
    (if (detect-collision-of-points l-point1 l-point2) (return-from get-distance-y-up value))
    (get-distance-y-up point1 point2 (- value 1))))

(defun get-distance-y-down (point1 point2 value)
  (let ((l-point1 (subseq point1 0))
	(l-point2 (subseq point2 0)))
    (if (= value 0) (return-from get-distance-y-down nil))
    (+= (svref l-point1 1) value)
    (if (detect-collision-of-points l-point1 l-point2) (return-from get-distance-y-down value))
    (get-distance-y-down point1 point2 (- value 1))))
