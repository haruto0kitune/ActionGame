(in-package :game)

(defparameter *vx* 1)
(defparameter *vy* 1)

(defun key-event (point1 point2 current-key-state)
  (with-slots (left right up down) current-key-state    
    (if (not (search-point-to-the-left point1 point2 *vx*))
      (if (eq left t) (-= (svref point1 0) *vx*)))
;      (if (eq left t) (-= (svref point1 0) (- (get-distance-x-left point1 point2 *vx*) 1))))
    (if (not (search-point-to-the-right point1 point2 *vx*))
      (if (eq right t) (+= (svref point1 0) *vx*))
      (if (eq right t) (+= (svref point1 0) (- (get-distance-x-right point1 point2 *vx*) 1))))
    (if (not (search-point-to-the-up point1 point2 *vy*))
      (if (eq up t) (-= (svref point1 1) *vy*))
      (if (eq up t) (-= (svref point1 1) (- (get-distance-y-up point1 point2 *vy*) 1))))
    (if (not (search-point-to-the-down point1 point2 *vy*))
      (if (eq down t) (+= (svref point1 1) *vy*))
      (if (eq down t) (+= (svref point1 1) (- (get-distance-y-down point1 point2 *vy*) 1))))))

(defun point-collision ()
  (sdl:with-init ()
    (sdl:window 800 600)
    (setf (sdl:frame-rate) 60)
    (let ((point1 (sdl:point :x 295 :y 300))
	  (point2 (sdl:point :x 300 :y 300))
	  (current-key-state (make-instance 'key-state)))
      (sdl:with-events (:poll)
	(:quit-event () t)
	(:key-down-event (:key key)
			 (when (sdl:key= key :sdl-key-escape)
			   (sdl:push-quit-event))
			 (update-key-state key t current-key-state))
	(:key-up-event (:key key)
		       (update-key-state key nil current-key-state))
	(:idle ()
	       (sdl:clear-display sdl:*black*)
	       (key-event point1 point2 current-key-state)
	       (sdl:draw-pixel point1 :color sdl:*white*)
	       (sdl:draw-pixel point2 :color sdl:*white*)
	       (sdl:update-display))))))
	     
(point-collision)
